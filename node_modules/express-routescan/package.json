{
  "name": "express-routescan",
  "homepage": "http://github.com/anotheri/express-routescan",
  "author": {
    "name": "Alexander Bykhov",
    "email": "another.side.of.my.soul@gmail.com",
    "url": "http://github.com/anotheri"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/anotheri/express-routescan.git"
  },
  "description": "Automatic file scanner for Express JS router.",
  "keywords": [
    "express",
    "expressjs",
    "router",
    "route",
    "file",
    "automatic",
    "scanner",
    "override"
  ],
  "version": "0.2.0",
  "main": "./index",
  "dependencies": {},
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "supertest": "*"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "ROUTESCAN_TEST=1 ./node_modules/.bin/mocha --reporter spec"
  },
  "readme": "# express-routescan\n\nThis [nodejs module](https://npmjs.org/package/express-routescan) is an automatic javascript files\nscanner for Express JS router.\n\n\n## Installation\n\n```\n$ npm install express-routescan\n```\n\n\n## Usage\n\nExpress-routescan module is the simplest way to configure and maintain router for complex express\napplications. You just have to create a 'routes/' folder (default) inside your project and write there\nyour routes.\n\nSo folder structure of your app will be like this:\n\n- app.js\n- routes/\n\t- index.js\n\t- users.js\n\t- transaction/\n\t\t- submit.js\n\nFor correct working you should require express-routescan module and pass _express application_ into\nthe one as first argument:\n\n```javascript\n// app.js\n\n// requires\nvar express = require('express');\nvar routescan = require('express-routescan');\n// …\n\nvar app = express();\n\n// app configuration\n\n// start express-routescan.\nroutescan(app);\n\n// ...\n```\n\n\n### Options\n\nThere are some additional options for express-routesan config:\n\n- `directory` — string or array of strings, default value is `[path.join(__dirname, './routes/')]`, so it's ./routes/ folder inside your project. If you want to use another folder(s), you should start express-routescan module with needed value of `directory` option.\n\n- `ext` – array, default value is `['.js']`. Use `ext` key if you want to redefine an array with valid file extensions.\n\n- `ignoreInvalid` — boolean, default value is `false`. Use `ignoreInvalid: true` if you don't want to get errors about invalid files in your routes folder.\n\n- `verbose` – boolean, default is `false`. This option is using for logging information about scanned files (ignored, invalid, routed).\n\n- `strictMode` – boolean, default is `false`. If it's `true` routes with method `all` are filtered as invalid.\n\n```javascript\nroutescan(app, {\n\tdirectory: [\n\t\t'./path/to/another/routes/folder/inside/my/project',\n\t\t'./relative/path/to/folder/that/will/be/scanned/second',\n\t\t'/full/path/to/folder/that/will/be/scanned/third'\n\t],\n\text: ['.rt', '.js'], // is for enable scanning for all *.rt and *.js files\n\tignoreInvalid: true, // is for ignoring invalid routes\n\tverbose: true,\n\tstrictMode: true // is for filtering `all`-method routes.\n});\n```\n\n\n## Route files\n\n#### Simple example\n\nIn turn, the simplest route file is a file with `module.exports` and should looks like this one:\n\n```javascript\n'use strict';\n\n/* GET home page. */\n\nmodule.exports = {\n\n\t'/': function(req, res){\n\t\tres.send(\"It's main page of my app.\");\n\t}\n\n};\n```\n\nExpress-routescan ignore invalid routes by default.\n\n#### More complicated example\n\n['get'] is default methods array for route. But you can set optional another `methods` (array\nof HTTP methods described in RFC 2616) and `middleware` function(s):\n\n```javascript\n'use strict';\n\nmodule.exports = {\n\n\t'/': {\n\t\tmethods: ['get'],\n\t\t//callback `fn` function is required\n\t\tfn: function(req, res){\n\t\t\tres.send(\"It's main page of my app. It use GET method.\");\n\t\t}\n\t},\n\n\t'/myAwesomeRouteForGetAndPost': {\n\t\tmethods: ['get', 'post'],\n\t\t//midleware is optional parameter\n\t\tmiddleware: [myMiddlewareFnOne, myMiddlewareFnTwo],\n\t\t//callback `fn` function is required\n\t \tfn: function(req, res){\n\t\t\tres.send(\"It's my awesome answer for GET and POST requests.\");\n\t\t}\n\t},\n\n\t'/myAnotherAwesomeRouteForPostRequest': {\n\t\tmethods: ['post'],\n\t\tmiddleware: [myMiddlewareFnThree],\n\t \tfn: function(req, res){\n\t\t\tres.send(\"It's my another awesome answer only for POST request.\");\n\t\t}\n\t}\n\n};\n```\n\n#### Forced routes (overrides)\n\nIf router already has handler for one route path and one method, other files with the same route path and the same method but scanned later will be ignored. It's a default behaviour of express-routescan. But you can use `forced` key into route definition for overrides of routes that already applied to application. So, if you have a route like the one in \"Simple example\" and you want to override it with another one, just add `forced: true` key into your route definition, e.g.:\n\n```javascript\n'use strict';\n\n/* GET overridden home page. */\n\nmodule.exports = {\n\n\t'/': {\n\t\tforced: true,\n\t\tfn:function(req, res){\n\t\t\tres.send(\"It's overridden main page of my app.\");\n\t\t}\n\t}\n\n};\n```\n\n#### Locked routes (not overridable)\n\nIf you want to protect your route from overrides you should use `locked: true` key into your route definition, e.g.:\n\n```javascript\n'use strict';\n\n/* GET not overridable (even by using forced routes) home page. */\n\nmodule.exports = {\n\n\t'/': {\n\t\tlocked: true,\n\t\tfn:function(req, res){\n\t\t\tres.send(\"It's not overridable main page of my app.\");\n\t\t}\n\t}\n\n};\n```\n\n\n#### Usage RegExp as route\n\nIf you want use RegExp with express-routescan, this example is special for you:\n\n```javascript\n'use strict';\n\nmodule.exports = {\n\n\t'/commits': {\n\t\tregexp: /^\\/commits\\/(\\w+)(?:\\.\\.(\\w+))?$/,\n\t\tfn: function(req, res){\n\t\t\tres.send(\"It's page would match \\\"GET /commits/71dbb9c\\\" as well as \\\"GET /commits/71dbb9c..4c084f9\\\".\");\n\t\t}\n\t}\n\n};\n```\n\n\n## .routeignore\n\nAs was mentioned above express-routescan ignore invalid route-files. Scanner also ignore\nall files except for valid extention array (by default `['.js']`) inside routes folder.\nIf you want to ignore some of _.js_ or other valid files you can use _.routeignore_ file\ninside your routes folder to add ignore rules for scanner. It's easy!\n\nFor example, if you don't want use routes from _'./routes/temp/'_ folder just create\n_'./routes/.routeignore'_ file with next content:\n\n```\ntemp/\n```\n\n\n## License\nThe MIT License (MIT)\n\nCopyright (c) 2013-2014 Alexander Bykhov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/anotheri/express-routescan/issues"
  },
  "_id": "express-routescan@0.2.0",
  "dist": {
    "shasum": "8d415170c303dd1b7c66f205e505772f9241fdab"
  },
  "_from": "express-routescan@latest",
  "_resolved": "https://registry.npmjs.org/express-routescan/-/express-routescan-0.2.0.tgz"
}
